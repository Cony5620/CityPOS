@model SaleWithDetailViewModel

@{
    ViewData["Title"] = "Sale";
}

<h3>Add Sale Record</h3><br />

@if (ViewData["Info"] != null)
{
    if (Convert.ToBoolean(ViewData["status"]))
    {
        <div class="alert alert-success" role="alert">
            @ViewData["Info"]
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            @ViewData["Info"]
        </div>
    }
}

<form id="saleform" asp-action="Entry" asp-controller="Sale" method="post">
   
<div class="container mt-3">
    <div class="row align-items-center">
        <!-- Sale Date -->
        <div class="col-3">
                <label asp-for="SaleOrder.SaleDate" class="form-label">Sale Date</label>
                <input type="date" id="saleDate" asp-for="SaleOrder.SaleDate" class="form-control" required>
        </div>

        <!-- VO No -->
        <div class="col-3">
                <label asp-for="SaleOrder.VoucherNo" class="form-label">Voucher No</label>
                <input type="text" asp-for="SaleOrder.VoucherNo" id="voNo" class="form-control" placeholder="VONO202412001" required>
        </div>
        <div class="col-2">
                <label asp-for="SaleOrder.Customerid" class="form-label">Customer</label>
                <select asp-for="SaleOrder.Customerid" class="form-select" required>
                <option value="">Select a Customer</option>
                @foreach (var customer in ViewBag.Customer)
                {
                    <option value="@customer.id">@customer.Name</option> 
                }
            </select>
        </div>

        <!-- RetailSale and WholeSale -->
        <div class="col-4 d-flex align-items-center">
            <div class="form-check me-3">
                <input type="radio" id="retail" name="saleType" value="Retail" class="form-check-input" checked>
                <label for="retail" class="form-check-label">RetailSale</label>
            </div>
            <div class="form-check me-3">
                <input type="radio" id="wholesale" name="saleType" value="Wholesale" class="form-check-input">
                <label for="wholesale" class="form-check-label">WholeSale</label>
            </div>

            <!-- Stock Switch -->
            <div class="form-check form-switch">
                <input type="checkbox" id="stockSwitch" class="form-check-input">
                <label for="stockSwitch" class="form-check-label">Stock On/Off</label>
                    <input type="hidden" id="stockSwitchHidden" name="StockSwitch" />
            </div>
        </div>
    </div>
</div>

<div class="container mt-3">
    <div class="row align-items-center">
        <!-- Barcode -->
        <div class="col-2">
                <label for="barcode" class="form-label">Barcode</label>
            <input type="text" id="barcode" class="form-control" placeholder="Scan or Enter Barcode">
        </div>
         
        <!-- Item Dropdown -->
        
            <div class="col-2">
                <label  class="form-label" for="itemId">Item</label>
            <select id="itemId" name="Itemid" class="form-select" required>
                <option value="">Select an Item</option>
                @foreach (var item in ViewBag.Item)
                {
                    <option value="@item.id">@item.Name</option>
                }
                </select>
            </div>


        <!-- Unit Dropdown -->
            <div class="col-1">
                <label class="form-label" for="unitId">Unit</label>
                <select id="unitId" name="Unitid" class="form-select" required>
                    <option value="">Select a Unit</option>
                    @foreach (var unit in ViewBag.Unit)
                    {
                        <option value="@unit.id">@unit.Name</option> <!-- Use unit.id for value and unit.Name for text -->
                    }
                </select>
            </div>



        <!-- Price -->
        <div class="col-1">
            <label for="price" class="form-label">Price</label>
            <input type="text" id="price" class="form-control" placeholder="0.00">
        </div>

        <!-- Quantity -->
        <div class="col-1">
            <label for="quantity" class="form-label">Qty</label>
            <input type="number" id="quantity" class="form-control" placeholder="0" min="1">
        </div>

        <!-- Discount (%) -->
        <div class="col-1">
            <label for="discountPercent" class="form-label">Disc %</label>
            <input type="number" id="discountPercent" class="form-control" placeholder="0" min="0" max="100">
        </div>

        <!-- Discount Amount -->
         <div class="col-1">
            <label for="discountAmount" class="form-label">Disc Amt</label>
            <input type="text" id="discountAmount" class="form-control" placeholder="0.00">
        </div> 

        <!-- FOC Checkbox -->
        <div class="col-1 d-flex align-items-center">
            <label class="form-check-label me-2" for="focCheckbox">FOC</label>
            <input type="checkbox" id="focCheckbox" class="form-check-input">
        </div>
        <!-- Add Button -->
        <div class="col-1">
            <button type="button" id="addButton" class="btn btn-primary mt-4">Add</button>
        </div>
            @* Hidden input fields to enable MVC binding for ItemDetails *@
            <div id="hiddenSaleDetails"></div>
    </div>
  
</div>
<div class="container mt-3">
   <table class="table " id="itemListTable" style="display: none;">
    <thead>
        <tr>
            <th>Item</th>
            <th>Unit</th>
            <th>Price</th>
            <th>Qty</th>
            <th>Disc %</th>
            <th>Disc Amt</th>
            <th>Amount</th>
            <th>FOC</th>
            <th>Total</th> 
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        <!-- Dynamic rows will be added here -->
    </tbody>
</table>
</div>



<div class="container mt-3 d-flex justify-content-end ">
    <div class="form-container ">
      

        <div class="row mb-1">
            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.SubTotal" for="SubTotal" class="form-label me-2">Sub Total:</label>
            </div>
            <div class="col-8 d-flex">
                    <input type="text" asp-for="SaleOrder.SubTotal" id="subTotal" class="form-control" readonly>
            </div>
        </div>
        <div class="row mb-1">
            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.TaxPercent" class="form-label me-2">Tax:</label>
            </div>
            <div class="col-4 d-flex">
                    <input type="number" asp-for="SaleOrder.TaxPercent"  id="taxPercent" class="form-control" placeholder="%">
            </div>
            <div class="col-4 d-flex">
                    <input type="number" asp-for="SaleOrder.Tax" id="taxAmount"  class="form-control" placeholder="0.00">
            </div>
        </div>

        <div class="row mb-1">
            <!-- Deliver Fee -->
            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.DeliverFees"  class="form-label me-2">Deliver Fee:</label>
            </div>
            <div class="col-8 d-flex">
                    <input type="number" asp-for="SaleOrder.DeliverFees"  id="deliveryFee" class="form-control" placeholder="0.00">
            </div>

        </div>
        <div class="row mb-1">
            <!-- Grand Total -->

            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.TotalAmount" class="form-label me-2">Grand Total:</label>
            </div>
            <div class="col-8 d-flex">
                    <input type="text" asp-for="SaleOrder.TotalAmount" id="grandTotal" class="form-control" placeholder="0.00" readonly>
            </div>

        </div>
        <div class="row mb-1">
            <!-- Discount -->

            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.DisPercent">Discount (%):</label>
            </div>
            <div class="col-4 d-flex">
                    <input type="number" asp-for="SaleOrder.DisPercent" id="overallDiscountPercent" class="form-control" placeholder="%" min="0" max="100">
            </div>
                <div class="col-4 d-flex">
                    <input type="number" asp-for="SaleOrder.DisAmount" id="overallDiscountAmount" class="form-control"  >
                </div>

        </div>
        <div class="row mb-1">
            <!-- Net Total -->
            <div class="col-4 d-flex">
                    <label  asp-for="SaleOrder.NetTotal" class="form-label me-2">Net Total:</label>

            </div>
            <div class="col-8 d-flex">

                    <input type="number" asp-for="SaleOrder.NetTotal"  id="netTotal" class="form-control" readonly>
            </div>
        </div>
        <div class="row mb-1">
            <!-- Cash Amount -->
            <div class="col-4 d-flex">
                    <label  asp-for="SaleOrder.CashAmount" class="form-label me-2">Cash Amount:</label>

            </div>
            <div class="col-8 d-flex">

                    <input type="text" asp-for="SaleOrder.CashAmount"  id="cashAmount" class="form-control" placeholder="0.00">
            </div>
        </div>
        <div class="row mb-1">
            <!-- Balance -->
            <div class="col-4 d-flex">
                    <label  asp-for="SaleOrder.Balance" class="form-label me-2">Balance:</label>

            </div>
            <div class="col-8 d-flex">

                    <input type="text" asp-for="SaleOrder.Balance" id="balance" class="form-control" placeholder="0.00" readonly>
            </div>
        </div>
            <!-- totalReturnAmount -->
         <div class="row mb-1">
            <div class="col-4 d-flex">
                    <label asp-for="SaleOrder.TotalReturnAmount" class="form-label me-2">TotalReturnAmount:</label>

            </div>
            <div class="col-8 d-flex">

                    <input type="text" asp-for="SaleOrder.TotalReturnAmount" id="totalReturnAmount" class="form-control" placeholder="0.00" readonly>
            </div>
        </div>
        <!-- Save and Refresh Buttons -->
        <div class="row mt-3">
            <div class="col-6 d-flex justify-content-end">
                    <button type="submit" id="entryButton" class="btn btn-success me-2">Entry</button>
                <button type="button" id="refreshButton" class="btn btn-warning">Refresh</button>
            </div>
        </div>

</div>
      
</form>
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
    $(document).ready(function () {
        $('#barcode').on('input', function () {
            var barcode = $(this).val().trim();

            if (barcode) {
                // Log barcode for debugging
                console.log('Barcode:', barcode);

                $.ajax({
                    url: '@Url.Action("GetItemDetails", "Sale")',
                    type: 'GET',
                    data: { barcode: barcode },
                    success: function (data) {
                        if (data) {
                            console.log('Data received:', data);

                            // Populate the item dropdown
                            if (data.itemName) {
                                const matchedItem = $('#itemId option').filter(function () {
                                    return $(this).text().trim().toLowerCase() === data.itemName.trim().toLowerCase();
                                });
                                if (matchedItem.length > 0) {
                                    matchedItem.prop('selected', true).change();
                                    console.log('Matched item selected:', matchedItem.val());
                                } else {
                                    console.error('Item not found in the dropdown:', data.itemName);
                                }
                            }

                            // Populate the unit dropdown
                            if (data.unitName) {
                                const matchedUnit = $('#unitId option').filter(function () {
                                    return $(this).text().trim().toLowerCase() === data.unitName.trim().toLowerCase();
                                });
                                if (matchedUnit.length > 0) {
                                    matchedUnit.prop('selected', true).change();
                                    console.log('Matched unit selected:', matchedUnit.val());
                                } else {
                                    console.error('Unit not found in the dropdown:', data.unitName);
                                }
                            }

                            // Populate the price field
                            var saleType = $('input[name="saleType"]:checked').val();
                            if (saleType === 'Retail') {
                                $('#price').val(data.retailSalePrice || 0.00);
                                console.log('Price updated for Retail:', data.retailSalePrice);
                            } else if (saleType === 'Wholesale') {
                                $('#price').val(data.wholeSalePrice || 0.00);
                                console.log('Price updated for Wholesale:', data.wholeSalePrice);
                            }
                        } else {
                            console.error('No data found for the barcode');
                            $('#itemId, #unitId, #price').val('');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching item details:', error);
                    }
                });
            } else {
                console.error('Barcode is empty');
            }
           
        });

        $('#stockSwitch').on('change', function () {
            var isChecked = $(this).is(':checked');
            $('#stockSwitchHidden').val(isChecked);
            console.log('Stock switch toggled:', isChecked ? 'On' : 'Off');
        });


        let itemIndex = 0;
        $('#addButton').on('click', function () {
            var itemId = $('#itemId').val();
            var itemName = $('#itemId option:selected').text();
            var unitId = $('#unitId').val();
            var unitName = $('#unitId option:selected').text();
            var price = parseFloat($('#price').val()) || 0;
            var quantity = parseInt($('#quantity').val()) || 0;
            var discountPercent = parseFloat($('#discountPercent').val()) || 0;
            var discountAmount = parseFloat($('#discountAmount').val()) || 0;
            var isFoc = $('#focCheckbox').is(':checked');

            // Initialize adjustedDiscountPercent to handle undefined variable error
            let adjustedDiscountPercent = discountPercent;

            // Validation
            if (!itemName || !unitName || price <= 0 || quantity <= 0) {
                alert("Please fill all required fields.");
                return false;
            }

            var amount = (price * quantity).toFixed(2);
            amount = parseFloat(amount); // Ensure amount is a number

            // Handle discount calculations
            if (isNaN(discountAmount)) discountAmount = 0;
            if (isNaN(discountPercent)) discountPercent = 0;

            if (discountAmount > 0) {
                adjustedDiscountPercent = ((discountAmount / amount) * 100).toFixed(2);
                adjustedDiscountPercent = parseFloat(adjustedDiscountPercent);
            } else if (discountPercent > 0) {
                discountAmount = (amount * discountPercent / 100).toFixed(2);
                discountAmount = parseFloat(discountAmount);
            } else {
                discountAmount = 0;
                adjustedDiscountPercent = 0;
            }

            var total = amount - discountAmount;
            if (isFoc) {
                total = 0;
            }

            // Append new row
            var newRow = `
            <tr>
                <td>${itemName}</td>
                <td>${unitName}</td>
                <td>${price.toFixed(2)}</td>
                <td>${quantity}</td>
                <td>${discountPercent > 0 ? discountPercent.toFixed(2) : '0.00'}</td>
                <td>${discountAmount > 0 ? discountAmount.toFixed(2) : '0.00'}</td>
                <td>${amount.toFixed(2)}</td>
                <td>${isFoc ? 'Yes' : 'No'}</td>
                <td>${total.toFixed(2)}</td>
                <td>
                    <button type="button" class="btn btn-danger btn-sm delete-row">Delete</button>
                </td>
            </tr>
        `;

            $('#itemListTable tbody').append(newRow);
            calculateTotals();
            $('#itemListTable').show();
            console.log($('#hiddenItemDetails').html());

            $('#hiddenSaleDetails').append(`

                <input type="hidden" name="SaleDetails[${itemIndex}].Itemid" value="${itemId}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].Unitid" value="${unitId}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].Quantity" value="${quantity}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].Price" value="${price.toFixed(2)}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].Total" value="${total.toFixed(2)}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].IsFOC" value="${isFoc}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].DisPercent" value="${discountPercent.toFixed(2)}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].DisAmount" value="${discountAmount.toFixed(2)}" />
                <input type="hidden" name="SaleDetails[${itemIndex}].Amount" value="${amount.toFixed(2)}" />
        `);
            itemIndex++;
        });

            // Delete row functionality with confirmation
        $('#itemListTable').on('click', '.delete-row', function () {
            var confirmation = confirm("Are you sure you want to delete this item?");
            if (confirmation) {
                $(this).closest('tr').remove();
                calculateTotals(); // Recalculate totals after deletion
            }
        });
        // Function to calculate totals
        function calculateTotals() {
            let subTotal = 0;

            // Calculate subtotal from item list table
            $("#itemListTable tbody tr").each(function () {
                const total = parseFloat($(this).find("td:nth-child(9)").text()) || 0;
                subTotal += total;
            });

            $("#subTotal").val(subTotal.toFixed(2));
            let taxAmount = 0;
            let overallDiscountAmount = 0;

            // Tax calculation
            const taxPercent = parseFloat($("#taxPercent").val()) || 0;
            if (taxPercent > 0) {
                taxAmount = (subTotal * taxPercent) / 100;
            } else {
                taxAmount = parseFloat($("#taxAmount").val()) || 0;
            }
            $("#taxAmount").val(taxAmount.toFixed(2));

            const deliveryFee = parseFloat($("#deliveryFee").val()) || 0;
            const grandTotal = subTotal + taxAmount + deliveryFee;
            $("#grandTotal").val(grandTotal.toFixed(2));

            // Overall discount calculation
            const overallDiscountPercent = parseFloat($("#overallDiscountPercent").val()) || 0;
            if (overallDiscountPercent > 0) {
                overallDiscountAmount = (grandTotal * overallDiscountPercent) / 100;
            } else {
                overallDiscountAmount = parseFloat($("#overallDiscountAmount").val()) || 0;
            }
            $("#overallDiscountAmount").val(overallDiscountAmount.toFixed(2));

            const netTotal = grandTotal - overallDiscountAmount;
            $("#netTotal").val(netTotal.toFixed(2));

            // Balance and return amount calculation
            const cashAmount = parseFloat($("#cashAmount").val()) || 0;
            let balance = netTotal - cashAmount;
            let totalReturnAmount = 0;

            if (cashAmount > netTotal) {
                totalReturnAmount = cashAmount - netTotal;
                balance = 0;
            } else if (cashAmount === netTotal) {
                totalReturnAmount = 0;
                balance = 0;
            }

            $("#balance").val(balance.toFixed(2));
            $("#totalReturnAmount").val(totalReturnAmount.toFixed(2));
        }

        // Function to sync tax percentage and amount dynamically
        function setupTaxSync() {
            // Flag to prevent circular updates
            let updating = false;

            // When tax percentage changes
            $("#taxPercent").on("input", function () {
                if (updating) return;
                updating = true;

                const subTotal = parseFloat($("#subTotal").val()) || 0;
                const taxPercent = parseFloat($(this).val()) || 0;
                const taxAmount = (subTotal * taxPercent) / 100;

                $("#taxAmount").val(taxAmount.toFixed(2));
                calculateTotals();

                updating = false;
            });

            // When tax amount changes
            $("#taxAmount").on("input", function () {
                if (updating) return;
                updating = true;

                const subTotal = parseFloat($("#subTotal").val()) || 0;
                const taxAmount = parseFloat($(this).val()) || 0;
                const taxPercent = (taxAmount / subTotal) * 100;

                $("#taxPercent").val(taxPercent.toFixed(2));
                calculateTotals();

                updating = false;
            });
        }

        // Function to sync discount percentage and amount dynamically
        function setupDiscountSync() {
            // Flag to prevent circular updates
            let updating = false;

            // When discount percentage changes
            $("#overallDiscountPercent").on("input", function () {
                if (updating) return;
                updating = true;

                const grandTotal = parseFloat($("#grandTotal").val()) || 0;
                const overallDiscountPercent = parseFloat($(this).val()) || 0;
                const overallDiscountAmount = (grandTotal * overallDiscountPercent) / 100;

                $("#overallDiscountAmount").val(overallDiscountAmount.toFixed(2));
                calculateTotals();

                updating = false;
            });

            // When discount amount changes
            $("#overallDiscountAmount").on("input", function () {
                if (updating) return;
                updating = true;

                const grandTotal = parseFloat($("#grandTotal").val()) || 0;
                const overallDiscountAmount = parseFloat($(this).val()) || 0;
                const overallDiscountPercent = (overallDiscountAmount / grandTotal) * 100;

                $("#overallDiscountPercent").val(overallDiscountPercent.toFixed(2));
                calculateTotals();

                updating = false;
            });
        }

        // Initialize on page load
        $(document).ready(function () {
            setupTaxSync();
            setupDiscountSync();

            // Trigger recalculation on other relevant fields
            $("#taxPercent, #deliveryFee, #cashAmount, #overallDiscountPercent, #subTotal").on("input", function () {
                calculateTotals();
            });

            // Initial totals calculation
            calculateTotals();
        });

            // Refresh button functionality
            $('#refreshButton').on('click', function () {
                // Display confirmation dialog
                if (confirm("Are you sure you want to refresh? Unsaved changes will be lost.")) {
                    // Option 1: Reload the page
                    location.reload();
                }
            });
       
    });

    $('#entryButton').on('click', function (event) {
        var cashAmount = parseFloat($("#cashAmount").val()) || 0;

        // Check if cash amount is not filled
        if (cashAmount <= 0) {
            alert("Please fill cash amount.");
            event.preventDefault(); // Prevent form submission
            return false; // Stop further execution
        }

        // Continue with the submission logic if validation passes
        console.log("Cash amount filled: ", cashAmount);
    });
    </script>

   







